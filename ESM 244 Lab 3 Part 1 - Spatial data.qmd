---
title: "ESM 244 Lab 3 Part 1: Working with spatial data"
author: "Zoe Sims"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true # embeds 
editor: visual
execute:
  echo: true
  message: false
  warnings: false
---

```{r setup}
library(tidyverse)
library(here)
library(broom)

# Spatial data packages
library(sf)
library(tmap) # thematic mapping
# Can also make maps with ggplot, but tmap has some fun advantages/features
```

# Overview: Spatial data wrangling and visualization

In this week's lecture, we learned a bit about projection and coordinate reference systems, types of spatial data, and investigating spatial autocorrelation using *variograms*. In this first part of lab we'll practice working with spatial data, then move on to variograms and spatial interpolation in the next part. We'll look at point pattern analysis (exploring spatial clustering) next week.

Today, we'll use vector data (polygons, points) to practice reading in spatial data, checking & updating the CRS, and doing some wrangling and visualization.

We'll use several datasets:

-   California County shapefile (ca_counties_tiger_2016.shp) from the US Census Bureau's 2016 MAF/TIGER database (accessed [here](https://data.ca.gov/dataset/ca-geographic-boundaries/resource/b0007416-a325-4777-9295-368ea6b710e6?inner_span=True))
-   Red sesbania records (invasive species) from the CA DFW (accessed [here](https://map.dfg.ca.gov/metadata/ds0080.html))

# California county outlines (polygons)

## Read it in with `read_sf`

First, let's read in the California county shapefile:

```{r}
ca_counties_raw_sf <- read_sf(here("data", "ca_counties", "CA_Counties_TIGER2016.shp"))
# .shp file is the shape data file, whereas .dbf is the database with info about that shape, and .prj has coordinate reference system information. We NEED to have all those types of files in the folder! If are missing any of them, bad things will happen. 
```

Note we only have to point to the .shp file, not all the others that are related. *They're all needed! read_sf automatically knows to look for them.*

The geometry column is what defines the spatial component of the dataframe.

## Do a bit of wrangling (and see sticky geometry!)

Use `View(ca_counties)` to check out what it contains. Let's simplify it by first converting area to km^2^ instead of m^2^, then only keeping county name and area.

```{r}
ca_counties_sf <- ca_counties_raw_sf %>% 
  janitor::clean_names() %>% # clean the names
  mutate(land_km2 = aland / 1e6) %>% # 1 km is 1m meters
  select(county = name, land_km2) #keep just the name and the land area
# but it will keep the spatial geometry column. Geometry is "sticky"!

head(ca_counties_sf)
```

Take a look at `ca_counties_sf`. We should notice something very important about a simple features (sf) object: it just **assumes** you want to keep the spatial information, and you can work with the rest of the data as if it's a non-spatial data frame (and the spatial information just "sticks" - hence the term "sticky geometry"). So even though we only called (and renamed) `name` and `aland` in the `select()` function, we see that the `geometry` column still exists!

What if we wanted just the dataframe, without the geometry? Convert to dataframe and select out the geometry column:

```{r}
ca_counties_df <- ca_counties_sf %>%
  as.data.frame() %>%
  select(-geometry)
```

## Check and set the CRS

Use `st_crs()` to check the existing CRS for spatial data. We see that this CRS is "pseudo-mercator" based on WGS 84 - primarily used for web mapping, not analysis. WGS84 (epsg:3857), also note proj4 string and WKT definitions.

```{r}
ca_counties_sf %>% st_crs() # extract the coordinate reference system 
# from the sf object
ca_counties_sf %>% terra::crs() ### to show proj4 string
```

## Explore it visually

Plot the California counties using `geom_sf()`. Notice that we can update aesthetics just like we would for a regular ggplot object. Here, we update the color based on land area (and change the color gradient).

```{r}
plot(ca_counties_sf)
### note: select a specific column to create a single map

ca_counties_sf %>% select(land_km2) %>% plot()
```

```{r}
ggplot(data = ca_counties_sf) +
  geom_sf(aes(fill = land_km2), color = "white", size = 0.1) +
  theme_void() + # gets rid of background lat/long and axes
  scale_fill_gradientn(colors = c("cyan","blue","purple"))
```

Notice what aesthetics we *didn't* have to specify here?

`geom_sf` knows to look for a column called `geometry` (or sometimes `geom`).

# Invasive red sesbania records (spatial points)

Red sesbania (*Sesbania punicea*) is an invasive plant (see more information from the [California Invasive Plants Council](https://www.cal-ipc.org/plants/profile/sesbania-punicea-profile/)). Observations for locations of invasive red sesbania are from CA DFW. See metadata and information here: <https://map.dfg.ca.gov/metadata/ds0080.html>

```{r}
#| eval: false
#| include: false

### Note that the original data includes a County column.  Let's drop that for
### lab just to avoid confusion, along with lat/long (we already have geometry).
### Let's also convert to a .gpkg to show another good vector file type.

#ds80.shp exists and would work, but Casey bundled it with different sorting 
# etc into a .gpkg 

# Here's that:
sesbania_nocounty_sf <- read_sf(here("data","red_sesbania","ds80.shp")) %>%
  select(-COUNTY, -LATITUDE, -LONGITUDE)
write_sf(sesbania_nocounty_sf, here("data","red_sesbania","ds80_for_lab.gpkg"))

```

## Read in the sesbania data

The data exist in `data/red_sesbania`, and the shapefile is stored as `ds80_for_lab.gpkg`. We also want to check the coordinate reference system, and plot the data for a quick visual understanding.

```{r}
sesbania_sf <- read_sf(here("data","red_sesbania","ds80_for_lab.gpkg")) %>%
  janitor::clean_names()

# Check the CRS:
sesbania_sf %>% st_crs() # different coordinate reference system than our other dataset! Oh no!!!
sesbania_sf %>% terra::crs()
```

```{r}
plot(sesbania_sf %>% select(id))
```

## The analysis:

Let's say we want to find the count of red sesbania observed locations in this dataset *by county*. We then want to create a map of all CA counties using fill color to indicate sesbania counts.

Write pseudocode to accomplish this.

### Pseudocode

-   join (inner join

-   summarize the sesbania_count

-   Make a map where the counties are mapped, the fill is the sesbania_count

## Transform CRS so records match counties

Notice that this CRS is different from the California counties CRS, so we'll want to update it to match. Use `st_transform()` to update the CRS:

```{r}
st_crs(ca_counties_sf) == st_crs(sesbania_sf) # false! We have a problem!

### if you know the EPSG code:
sesbania_3857_sf <- st_transform(sesbania_sf, 3857)
### if you don't know the EPSG code:
sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf))

# Then check it: 
sesbania_3857_sf %>% st_crs()

st_crs(ca_counties_sf) == st_crs(sesbania_3857_2_sf) # true!

```

Cool, now they have the same CRS.

### Plot them together!

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf) + # aes automatically knows what a geometry is
  geom_sf(data = sesbania_3857_sf, size = 1, color = "red") +
  theme_void()
```

## Spatial join

How can I go about joining these data so that I can find counts? Don't worry...`st_join()` has you covered for spatial joins!

```{r}
# mash them together based on geometry.
ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf) 
# multipolygons with points in them


sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf) # points within counties
```

Note: joining defaults to keeping the geometry of the first object, and adds the records of the second where they spatially overlap the first (but drops the geometry of the second). And then we can find counts (note: these are not counts for individual plants, but by record in the dataset) by county. We can't just count the rows (e.g., using count()) because some rows are counties with no records (and sesbania information is all NAs).

We can also join the other direction:

```{r}
sesb_counties_sf <- sesbania_3857_sf %>% 
  st_join(ca_counties_sf)

head(sesb_counties_sf)
```

This one keeps the point geometry of the plant records, but appends the county name and area from the CA map.

## Summarize observations by county

Keeping the CA polygons...

```{r}
sesb_counts_sf <- ca_sesb_sf %>% 
  group_by(county) %>%
  summarize(n_records = sum(!is.na(id))) # don't count the NA's
# counties listed with just one NA value have zero sesbania counts.

head(sesb_counts_sf)
```

Then we can plot a choropleth using the number of records for red sesbania as the fill color (instead of what we used previously, land area):

```{r}
ggplot(data = sesb_counts_sf) +
  geom_sf(aes(fill = n_records), color = "white", size = 0.1) +
  scale_fill_gradientn(colors = c("lightgray","orange","red")) +
  theme_minimal() +
  labs(fill = "Number of S. punicea records")
```

So we see that we can still use our usual wrangling skills! Let's do a bit more for fun, just to prove that our existing wrangling skills still work with spatial data - the spatial information just sticks to it! Only plot the county with the greatest number of red sesbania records, and make a map of those locations (yeah there are many ways to do this).

### Pseudocode here!

slice max, n = 1

filter so it's just that county

plot with points

```{r}
county_max <- sesb_counts_sf %>% 
  filter(n_records == max(n_records)) %>%
  pull(county)

solano_sesb_sf <- sesb_ca_sf %>%
  filter(county == county_max) 
# OR USE filter(county %in% county_max)

solano_sf <- ca_counties_sf %>%
  filter(county %in% county_max)


# Subset of sesbania point locations only in Solano County

county_max <- sesb_counts_sf %>%
  filter(n_records == max(n_records)) %>%
  pull(county)

### we appended the county names to Sesbania records earlier:
solano_sesb_sf <- sesb_counties_sf %>% 
  filter(county == county_max) ### what if two counties had the same max value?

# Only keep Solano polygon from California County data
solano_sf <- ca_counties_sf %>% 
  filter(county %in% county_max)

ggplot() +
  geom_sf(data = solano_sf) + # plot the outline
  geom_sf(data = solano_sesb_sf, color = 'red') # plot the points
```

# Making an interactive map with `tmap`

Sometimes we'll want to make a map interactive so that audience members can zoom in, explore different areas, etc. We can use the `tmap` package to create an interactive map. Let's make one for our California counties (fill aesthetic by land area) with the red sesbania locations on top:

```{r}
#| eval: false ### the interactive map makes the HTML huge
#| echo: true # prints the code, but doesn't run it because eval: false

# Set the viewing mode to "interactive":
tmap_mode(mode = "view")

# Then make a map (with the polygon fill color updated by variable 'land_km2', updating the color palette to "BuGn"), then add another shape layer for the sesbania records (added as dots):
tm_shape(ca_counties_sf) +
  tm_fill("land_km2", palette = "BuGn") + # make filled polygons
  tm_shape(sesbania_sf) + # tmap will automatically convert 
  # to the same coordinate system!
  tm_dots() # make dots
```

See *all* kinds of other cool ways you can update your interactive tmaps.

See:

-   [`tmap` vignettes](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)
-   [Chapter 8 in Robin Lovelace's "Geocomputation in R"](https://geocompr.robinlovelace.net/adv-map.html#interactive-maps)

```{r}
library(tidyverse)
library(here)
library(broom)

# Spatial data packages
library(sf)
library(tmap)
```

# Overview: Spatial data wrangling and visualization

In this week's lecture, we learned a bit about projection and coordinate reference systems, types of spatial data, and investigating spatial autocorrelation using *variograms*. In this first part of lab we'll practice working with spatial data, then move on to variograms and spatial interpolation in the next part. We'll look at point pattern analysis (exploring spatial clustering) next week.

Today, we'll use vector data (polygons, points) to practice reading in spatial data, checking & updating the CRS, and doing some wrangling and visualization.

We'll use several datasets:

-   California County shapefile (ca_counties_tiger_2016.shp) from the US Census Bureau's 2016 MAF/TIGER database (accessed [here](https://data.ca.gov/dataset/ca-geographic-boundaries/resource/b0007416-a325-4777-9295-368ea6b710e6?inner_span=True))
-   Red sesbania records (invasive species) from the CA DFW (accessed [here](https://map.dfg.ca.gov/metadata/ds0080.html))

# California county outlines (polygons)

## Read it in with `read_sf`

First, let's read in the California county shapefile:

```{r}
ca_counties_raw_sf <- read_sf(here("data", "ca_counties", "CA_Counties_TIGER2016.shp"))
```

Note we only have to point to the .shp file, not all the others that are related.

## Do a bit of wrangling (and see sticky geometry!)

Use `View(ca_counties)` to check out what it contains. Let's simplify it by first converting area to km^2^ instead of m^2^, then only keeping county name and area.

```{r}
ca_counties_sf <- ca_counties_raw_sf %>% 
  janitor::clean_names() %>%
  mutate(land_km2 = aland / 1e6) %>%
  select(county = name, land_km2)

head(ca_counties_sf)
```

Take a look at `ca_counties_sf`. We should notice something very important about a simple features (sf) object: it just **assumes** you want to keep the spatial information, and you can work with the rest of the data as if it's a non-spatial data frame (and the spatial information just "sticks" - hence the term "sticky geometry"). So even though we only called (and renamed) `name` and `aland` in the `select()` function, we see that the `geometry` column still exists!

What if we wanted just the dataframe, without the geometry? Convert to dataframe and select out the geometry column:

```{r}
ca_counties_df <- ca_counties_sf %>%
  as.data.frame() %>%
  select(-geometry)
```

## Check and set the CRS

Use `st_crs()` to check the existing CRS for spatial data. We see that this CRS is "pseudo-mercator" based on WGS 84 - primarily used for web mapping, not analysis. WGS84 (epsg:3857), also note proj4 string and WKT definitions.

```{r}
ca_counties_sf %>% st_crs()
ca_counties_sf %>% terra::crs() ### to show proj4 string
```

## Explore it visually

Plot the California counties using `geom_sf()`. Notice that we can update aesthetics just like we would for a regular ggplot object. Here, we update the color based on land area (and change the color gradient).

```{r}
plot(ca_counties_sf)
### note: select a specific column to create a single map
```

```{r}
ggplot(data = ca_counties_sf) +
  geom_sf(aes(fill = land_km2), color = "white", size = 0.1) +
  theme_void() +
  scale_fill_gradientn(colors = c("cyan","blue","purple"))
```

Notice what aesthetics we *didn't* have to specify here?

`geom_sf` knows to look for a column called `geometry` (or sometimes `geom`).

# Invasive red sesbania records (spatial points)

Red sesbania (*Sesbania punicea*) is an invasive plant (see more information from the [California Invasive Plants Council](https://www.cal-ipc.org/plants/profile/sesbania-punicea-profile/)). Observations for locations of invasive red sesbania are from CA DFW. See metadata and information here: <https://map.dfg.ca.gov/metadata/ds0080.html>

```{r}
#| eval: false
#| include: false

### Note that the original data includes a County column.  Let's drop that for
### lab just to avoid confusion, along with lat/long (we already have geometry).
### Let's also convert to a .gpkg to show another good vector file type.

sesbania_nocounty_sf <- read_sf(here("data","red_sesbania","ds80.shp")) %>%
  select(-COUNTY, -LATITUDE, -LONGITUDE)
write_sf(sesbania_nocounty_sf, here("data","red_sesbania","ds80_for_lab.gpkg"))

```

## Read in the sesbania data

The data exist in `data/red_sesbania`, and the shapefile is stored as `ds80_for_lab.gpkg`. We also want to check the coordinate reference system, and plot the data for a quick visual understanding.

```{r}
sesbania_sf <- read_sf(here("data","red_sesbania","ds80_for_lab.gpkg")) %>%
  janitor::clean_names()

# Check the CRS:
sesbania_sf %>% st_crs()
sesbania_sf %>% terra::crs()
```

```{r}
plot(sesbania_sf %>% select(id))
```

## The analysis:

Let's say we want to find the count of red sesbania observed locations in this dataset *by county*. We then want to create a map of all CA counties using fill color to indicate sesbania counts.

Write pseudocode to accomplish this.

### Pseudocode

## Transform CRS so records match counties

Notice that this CRS is different from the California counties CRS, so we'll want to update it to match. Use `st_transform()` to update the CRS:

```{r}
### if you know the EPSG code:
sesbania_3857_sf <- st_transform(sesbania_sf, 3857)
### if you don't know the EPSG code:
sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf))

# Then check it: 
sesbania_3857_sf %>% st_crs()
```

Cool, now they have the same CRS.

### Plot them together!

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf) +
  geom_sf(data = sesbania_3857_sf, size = 1, color = "red")
```

## Spatial join

How can I go about joining these data so that I can find counts? Don't worry...`st_join()` has you covered for spatial joins!

```{r}
ca_sesb_sf <- ca_counties_sf %>% 
  st_join(sesbania_3857_sf)

head(ca_sesb_sf)
```

Note: joining defaults to keeping the geometry of the first object, and adds the records of the second where they spatially overlap the first (but drops the geometry of the second). And then we can find counts (note: these are not counts for individual plants, but by record in the dataset) by county. We can't just count the rows (e.g., using count()) because some rows are counties with no records (and sesbania information is all NAs).

We can also join the other direction:

```{r}
sesb_counties_sf <- sesbania_3857_sf %>% 
  st_join(ca_counties_sf)

head(sesb_counties_sf)
```

This one keeps the point geometry of the plant records, but appends the county name and area from the CA map.

## Summarize observations by county

Keeping the CA polygons...

```{r}
sesb_counts_sf <- ca_sesb_sf %>% 
  group_by(county) %>%
  summarize(n_records = sum(!is.na(id)))

head(sesb_counts_sf)
```

Then we can plot a choropleth using the number of records for red sesbania as the fill color (instead of what we used previously, land area):

```{r}
ggplot(data = sesb_counts_sf) +
  geom_sf(aes(fill = n_records), color = "white", size = 0.1) +
  scale_fill_gradientn(colors = c("lightgray","orange","red")) +
  theme_minimal() +
  labs(fill = "Number of S. punicea records")
```

So we see that we can still use our usual wrangling skills! Let's do a bit more for fun, just to prove that our existing wrangling skills still work with spatial data - the spatial information just sticks to it! Only plot the county with the greatest number of red sesbania records, and make a map of those locations (yeah there are many ways to do this).

### Pseudocode here!

```{r}
# Subset of sesbania point locations only in Solano County

county_max <- sesb_counts_sf %>%
  filter(n_records == max(n_records)) %>%
  pull(county)

### we appended the county names to Sesbania records earlier:
solano_sesb_sf <- sesb_counties_sf %>% 
  filter(county == county_max) ### what if two counties had the same max value?

# Only keep Solano polygon from California County data
solano_sf <- ca_counties_sf %>% 
  filter(county %in% county_max)

ggplot() +
  geom_sf(data = solano_sf) +
  geom_sf(data = solano_sesb_sf, color = 'red')
```

# Making an interactive map with `tmap`

Sometimes we'll want to make a map interactive so that audience members can zoom in, explore different areas, etc. We can use the `tmap` package to create an interactive map. Let's make one for our California counties (fill aesthetic by land area) with the red sesbania locations on top:

```{r}
#| eval: false ### the interactive map makes the HTML huge
#| echo: true

# Set the viewing mode to "interactive":
tmap_mode(mode = "view")

# Then make a map (with the polygon fill color updated by variable 'land_km2', updating the color palette to "BuGn"), then add another shape layer for the sesbania records (added as dots):
tm_shape(ca_counties_sf) +
  tm_fill("land_km2", palette = "BuGn") +
  tm_shape(sesbania_sf) +
  tm_dots()
```

See *all* kinds of other cool ways you can update your interactive tmaps.

See:

-   [`tmap` vignettes](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)
-   [Chapter 8 in Robin Lovelace's "Geocomputation in R"](https://geocompr.robinlovelace.net/adv-map.html#interactive-maps)
